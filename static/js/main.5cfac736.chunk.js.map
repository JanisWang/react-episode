{"version":3,"sources":["components/MovieInfo.js","functions/buttonActive.js","components/SeasonButtons.js","functions/formatEpisodeDescription.js","components/SingleEpisodeCard.js","functions/sortEpisodeList.js","components/EpisodeList.js","components/PageLoad.js","components/serviceWorker.js","index.js"],"names":["MovieInfo","name","this","props","data","genre","genres","join","rating","average","summary","ReactHtmlParser","officialSiteUrl","officialSite","imageUrlOriginal","image","original","imageUrlMedium","medium","react_default","a","createElement","id","className","srcSet","media","src","alt","href","Component","ButtonActive","season","seasonBtn","document","getElementById","querySelectorAll","activeBtn","getElementsByClassName","classList","add","remove","SeasonButtons","UpdateCurrentSeason","UpdateSortType","UpdateOrderType","seasonNumber","seasonButtons","_loop","i","push","key","onClick","onChange","e","target","value","FormatEpisodeDescription","description","descriptionArr","split","length","splice","SingleEpisodeCard","episode","url","moment","airdate","format","number","SortEpisodeList","episodeList","sortType","order","sort","b","nameA","toUpperCase","nameB","reverse","EpisodeList","_this","items","episodes","forEach","element","currentSeason","components_SingleEpisodeCard","PageLoad","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","setState","orderType","_embedded","components_MovieInfo","components_SeasonButtons","bind","components_EpisodeList","Boolean","window","location","hostname","match","ReactDOM","render","components_PageLoad","querySelector","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"st/CAiCeA,0LAzBX,IAAMC,EAAOC,KAAKC,MAAMC,KAAKH,KACvBI,EAAQH,KAAKC,MAAMC,KAAKE,OAAOC,KAAK,MACpCC,EAASN,KAAKC,MAAMC,KAAKI,OAAOC,QAChCC,EAAUC,IAAgBT,KAAKC,MAAMC,KAAKM,SAC1CE,EAAkBV,KAAKC,MAAMC,KAAKS,aAClCC,EAAmBZ,KAAKC,MAAMC,KAAKW,MAAMC,SACzCC,EAAiBf,KAAKC,MAAMC,KAAKW,MAAMG,OAE7C,OACEC,EAAAC,EAAAC,cAAA,WAASC,GAAG,aACVH,EAAAC,EAAAC,cAAA,WAASE,UAAU,gBACjBJ,EAAAC,EAAAC,cAAA,UAAQG,OAAQP,EAAgBQ,MAAM,uBACtCN,EAAAC,EAAAC,cAAA,OAAKK,IAAMZ,EAAkBa,IAAK1B,KAEpCkB,EAAAC,EAAAC,cAAA,OAAKE,UAAU,eACbJ,EAAAC,EAAAC,cAAA,UAAKpB,GACLkB,EAAAC,EAAAC,cAAA,KAAGE,UAAU,QAAb,UAA4BlB,EAA5B,cAA8CG,GAC7CE,EACDS,EAAAC,EAAAC,cAAA,KAAGE,UAAU,SAASK,KAAMhB,GAA5B,0BApBciB,cCMTC,MAXf,SAAsBC,GAElB,IAAMC,EAAYC,SAASC,eAAe,aAAaC,iBAAiB,UAElEC,EAAYH,SAASI,uBAAuB,UAAU,GAE5DL,EAAUD,GAAQO,UAAUC,IAAI,UAEhCH,EAAUE,UAAUE,OAAO,WCiChBC,mLA9BP,IAPA,IAAIC,EAAsBxC,KAAKC,MAAMuC,oBACjCC,EAAiBzC,KAAKC,MAAMwC,eAC5BC,EAAkB1C,KAAKC,MAAMyC,gBAC7BC,EAAe3C,KAAKC,MAAM0C,aAE1BC,EAAgB,GANfC,EAAA,SAQGC,GACJF,EAAcG,KACV9B,EAAAC,EAAAC,cAAA,UAAQE,UAAU,SAAS2B,IAAKF,EAAGG,QAAS,WAAOT,EAAoBM,GAAIlB,EAAakB,KAAOA,KAF/FA,EAAI,EAAGA,GAAIH,EAAcG,IAAID,EAA7BC,GAMR,OACI7B,EAAAC,EAAAC,cAAA,WAASC,GAAG,WACRH,EAAAC,EAAAC,cAAA,cACIF,EAAAC,EAAAC,cAAA,qBAEAF,EAAAC,EAAAC,cAAA,UAAQ+B,SAAU,SAACC,GAAD,OAAOV,EAAeU,EAAEC,OAAOC,SAC7CpC,EAAAC,EAAAC,cAAA,UAAQkC,MAAM,QAAd,gBACApC,EAAAC,EAAAC,cAAA,UAAQkC,MAAM,QAAd,iBAGJpC,EAAAC,EAAAC,cAAA,UAAQ+B,SAAU,SAACC,GAAD,OAAOT,EAAgBS,EAAEC,OAAOC,SAC9CpC,EAAAC,EAAAC,cAAA,UAAQkC,MAAM,OAAd,UACApC,EAAAC,EAAAC,cAAA,UAAQkC,MAAM,QAAd,YAGRpC,EAAAC,EAAAC,cAAA,OAAKC,GAAG,YAAYC,UAAU,WAC1BJ,EAAAC,EAAAC,cAAA,UAAQE,UAAU,gBAAgB2B,IAAI,MAAMC,QAAS,WAAOT,EAAoB,GAAIZ,EAAa,KAAjG,OACCgB,WAhCOjB,aCSb2B,MAXf,SAAkCC,GAE9B,IACMC,EAAiBD,EAAYE,MAAM,KAKzC,OAHGD,EAAeE,OAHJ,KAIVH,EAAcC,EAAeG,OAAO,EAJ1B,IAIoCtD,KAAK,KAAO,WAEvDkD,oBCSIK,mLAXP,OACI3C,EAAAC,EAAAC,cAAA,KAAGE,UAAU,OAAOK,KAAM1B,KAAKC,MAAM4D,QAAQC,IAAKd,IAAKhD,KAAKC,MAAM4D,QAAQzC,IACtEH,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAAA,OAAKK,IAAKxB,KAAKC,MAAM4D,QAAQhD,MAAMG,OAAQS,IAAKzB,KAAKC,MAAM4D,QAAQ9D,QACxEkB,EAAAC,EAAAC,cAAA,OAAKE,UAAU,gBAAgBrB,KAAKC,MAAM4D,QAAQ9D,MAClDkB,EAAAC,EAAAC,cAAA,WAAMV,IAAgB6C,EAAyBtD,KAAKC,MAAM4D,QAAQrD,WAClES,EAAAC,EAAAC,cAAA,OAAKE,UAAU,QAAf,SAA6B0C,IAAO/D,KAAKC,MAAM4D,QAAQG,SAASC,OAAO,cAAvE,cAAiGjE,KAAKC,MAAM4D,QAAQhC,OAApH,eAAwI7B,KAAKC,MAAM4D,QAAQK,gBAP3IvC,aCsBjBwC,MA1Bf,SAAyBC,EAAaC,EAAUC,GAuB5C,OArBAF,EAAYG,KAAK,SAASrD,EAAGsD,GAEzB,IAAIC,EAAQvD,EAAE8C,QAAQU,cAClBC,EAAQH,EAAER,QAAQU,cAKtB,MAJiB,SAAbL,IACFI,EAAQvD,EAAEnB,KAAK2E,cACfC,EAAQH,EAAEzE,KAAK2E,eAEbD,EAAQE,GACF,EAENF,EAAQE,EACH,EAGF,IAGG,SAAVL,GACAF,EAAYQ,UAETR,GCGIS,mLAnBF,IAAAC,EAAA9E,KACD+E,EAAQ,GASZ,OARkBZ,EAAgBnE,KAAKC,MAAM+E,SAAUhF,KAAKC,MAAMoE,SAAUrE,KAAKC,MAAMqE,OAC3EW,QAAQ,SAAAC,GACiB,IAA7BJ,EAAK7E,MAAMkF,cACXJ,EAAMhC,KAAK9B,EAAAC,EAAAC,cAACiE,EAAD,CAAmBvB,QAASqB,KAChCA,EAAQrD,SAAWiD,EAAK7E,MAAMkF,eACrCJ,EAAMhC,KAAK9B,EAAAC,EAAAC,cAACiE,EAAD,CAAmBvB,QAASqB,OAI3CjE,EAAAC,EAAAC,cAAA,WAASC,GAAG,gBACRH,EAAAC,EAAAC,cAAA,sBACAF,EAAAC,EAAAC,cAAA,eAAU4D,WAdApD,aCiDX0D,cAjDX,SAAAA,EAAYpF,GAAO,IAAA6E,EAAA,OAAAQ,OAAAC,EAAA,EAAAD,CAAAtF,KAAAqF,IACfP,EAAAQ,OAAAE,EAAA,EAAAF,CAAAtF,KAAAsF,OAAAG,EAAA,EAAAH,CAAAD,GAAAK,KAAA1F,KAAMC,KACD0F,MAAQ,CACXhD,aAAc,EACdwC,cAAe,EACfd,SAAU,OACVC,MAAO,OANMQ,mFAUCK,GAChBnF,KAAK4F,SAAS,CACZT,cAAeA,2CAINd,GACXrE,KAAK4F,SAAS,CACVvB,SAAUA,4CAIFwB,GACZ7F,KAAK4F,SAAS,CACVtB,MAAOuB,qCAKX,IAAMb,EAAW9E,EAAK4F,UAAUd,SAChC,OAEI/D,EAAAC,EAAAC,cAAA,YACIF,EAAAC,EAAAC,cAAC4E,EAAD,CAAW7F,KAAMA,IACjBe,EAAAC,EAAAC,cAAC6E,EAAD,CACIrD,aAAc3C,KAAK2F,MAAMhD,aACzBH,oBAAqBxC,KAAKwC,oBAAoByD,KAAKjG,MACnDyC,eAAgBzC,KAAKyC,eAAewD,KAAKjG,MACzC0C,gBAAiB1C,KAAK0C,gBAAgBuD,KAAKjG,QAC/CiB,EAAAC,EAAAC,cAAC+E,EAAD,CACIlB,SAAUA,EACVG,cAAenF,KAAK2F,MAAMR,cAC1Bd,SAAUrE,KAAK2F,MAAMtB,SACrBC,MAAOtE,KAAK2F,MAAMrB,gBA5Cf3C,aCMHwE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACLxF,EAAAC,EAAAC,cAACuF,EAAD,MACA3E,SAAS4E,cAAc,UD0HrB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.5cfac736.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport ReactHtmlParser from 'react-html-parser';\nimport '../index.scss';\n\n// component: MovieInfo\n// description: this component contains GOT feature image, and description\nclass MovieInfo extends Component {\n  render() {\n    const name = this.props.data.name;\n    const genre = this.props.data.genres.join(', ');\n    const rating = this.props.data.rating.average;\n    const summary = ReactHtmlParser(this.props.data.summary);\n    const officialSiteUrl = this.props.data.officialSite;\n    const imageUrlOriginal = this.props.data.image.original;\n    const imageUrlMedium = this.props.data.image.medium;\n\n    return (\n      <section id=\"movieInfo\">\n        <picture className=\"featureImage\">\n          <source srcSet={imageUrlMedium} media=\"(min-width: 769px)\" />\n          <img src= {imageUrlOriginal} alt={name}/>\n        </picture>\n        <div className=\"infoDetails\">\n          <h1>{name}</h1>\n          <p className=\"info\">Genre: {genre} | Rating: {rating}</p>\n          {summary}\n          <a className=\"button\" href={officialSiteUrl}>Official Site</a>\n        </div>\n      </section>\n    );\n  }\n}\n\nexport default MovieInfo;\n","// add class active when button clicks\nfunction ButtonActive(season) {\n    // find all button elements in season section\n    const seasonBtn = document.getElementById('seasonBtn').querySelectorAll('button');\n    // find the button which currently has class \"active\"\n    const activeBtn = document.getElementsByClassName('active')[0];\n    // add class \"active\" only to button that has been clicked\n    seasonBtn[season].classList.add('active');\n    // remove de-activate current active button\n    activeBtn.classList.remove('active');\n}\n\nexport default ButtonActive;","import React, { Component } from \"react\";\nimport ButtonActive from '../functions/buttonActive';\n\nclass SeasonButtons extends Component {\n    render() {\n        let UpdateCurrentSeason = this.props.UpdateCurrentSeason;\n        let UpdateSortType = this.props.UpdateSortType;\n        let UpdateOrderType = this.props.UpdateOrderType;\n        let seasonNumber = this.props.seasonNumber;\n\n        let seasonButtons = [];\n        // generate season buttons by loop\n        for(let i = 1; i<= seasonNumber; i++){\n            seasonButtons.push(\n                <button className=\"button\" key={i} onClick={() => {UpdateCurrentSeason(i); ButtonActive(i);}}>{i}</button>\n            );\n        }\n        \n        return (\n            <section id=\"seasons\">\n                <header>\n                    <h2>Seasons</h2>\n                    {/* Sort type selection: sort by name or date */}\n                    <select onChange={(e) => UpdateSortType(e.target.value)}>\n                        <option value=\"date\">Sort by date</option>\n                        <option value=\"name\">Sort by Name</option>\n                    </select>\n                    {/* Order selection: order by asc or desc */}\n                    <select onChange={(e) => UpdateOrderType(e.target.value)}>\n                        <option value=\"asc\">тег</option>\n                        <option value=\"desc\">тее</option>\n                    </select>\n                </header>\n                <div id=\"seasonBtn\" className=\"seasons\">\n                    <button className=\"button active\" key=\"all\" onClick={() => {UpdateCurrentSeason(0); ButtonActive(0);}}>All</button>\n                    {seasonButtons}\n                </div>\n            </section>\n        );\n    }\n}\n\nexport default SeasonButtons;","// return first {count} words\nfunction FormatEpisodeDescription(description) {\n    // define count, easy to change later when necessary\n    const count = 35;\n    const descriptionArr = description.split(' ');\n    // return first {count} number words in description.\n    if(descriptionArr.length > count) {\n        description = descriptionArr.splice(0, count).join(' ') + '...</p>';\n    }\n    return description;\n}\n\nexport default FormatEpisodeDescription;","import React, { Component } from \"react\";\nimport FormatEpisodeDescription from '../functions/formatEpisodeDescription';\nimport ReactHtmlParser from 'react-html-parser';\nimport moment from 'moment';\n\nclass SingleEpisodeCard extends Component {\n    render() {   \n        return (\n            <a className=\"card\" href={this.props.episode.url} key={this.props.episode.id}>\n                <div><img src={this.props.episode.image.medium} alt={this.props.episode.name} /></div>\n                <div className=\"episodeTitle\">{this.props.episode.name}</div>\n                <div>{ReactHtmlParser(FormatEpisodeDescription(this.props.episode.summary))}</div>\n                <div className=\"info\">Date: {moment(this.props.episode.airdate).format(\"DD MMMM YY\")} | Season: {this.props.episode.season} | Episode: {this.props.episode.number}</div>\n            </a>\n        );\n    }\n}\n\nexport default SingleEpisodeCard;","// return episode objects by sort type (date or name) with order type (ASC/DESC)\nfunction SortEpisodeList(episodeList, sortType, order) {\n\n    episodeList.sort(function(a, b) {\n        // default to sort by date ASC\n        let nameA = a.airdate.toUpperCase();\n        let nameB = b.airdate.toUpperCase();\n        if (sortType === 'name') {\n          nameA = a.name.toUpperCase();\n          nameB = b.name.toUpperCase();\n        }\n        if (nameA < nameB) {\n          return -1;\n        }\n        if (nameA > nameB) {\n          return 1;\n        }\n        // when name values are equal\n        return 0;\n    });\n    // reverse sorted episodeList when order by DESC\n    if (order === 'desc') {\n        episodeList.reverse();\n    }\n    return episodeList;\n}\n\nexport default SortEpisodeList;","import React, { Component } from \"react\";\nimport SingleEpisodeCard from './SingleEpisodeCard';\nimport SortEpisodeList from '../functions/sortEpisodeList';\nimport '../index.scss';\n\n// component: EpisodeList\n// description: this component contains season select options, and episode list\nclass EpisodeList extends Component {\n    render() {\n        let items = [];\n        let newEpisodes = SortEpisodeList(this.props.episodes, this.props.sortType, this.props.order);\n        newEpisodes.forEach(element => {\n            if (this.props.currentSeason === 0) {\n                items.push(<SingleEpisodeCard episode={element} />);\n            } else if (element.season === this.props.currentSeason) {\n                items.push(<SingleEpisodeCard episode={element} />);\n            }\n        });\n        return (\n            <section id=\"episodeCards\">\n                <h2>Episodes</h2>\n                <article>{items}</article>\n            </section>\n        );\n    }\n}\n\nexport default EpisodeList;","import React, { Component } from \"react\";\nimport data from '../data.json';\nimport MovieInfo from './MovieInfo';\nimport SeasonButtons from './SeasonButtons';\nimport EpisodeList from './EpisodeList';\n\nclass PageLoad extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n          seasonNumber: 8,\n          currentSeason: 0,\n          sortType: 'date',\n          order: 'asc',\n        };\n    }\n\n    UpdateCurrentSeason(currentSeason) {\n        this.setState({\n          currentSeason: currentSeason\n        });\n    }\n\n    UpdateSortType(sortType) {\n        this.setState({\n            sortType: sortType\n        });\n    }\n\n    UpdateOrderType(orderType) {\n        this.setState({\n            order: orderType\n        });\n    }\n\n    render() {\n        const episodes = data._embedded.episodes;\n        return(\n            // load components\n            <main>\n                <MovieInfo data={data}/>\n                <SeasonButtons \n                    seasonNumber={this.state.seasonNumber} \n                    UpdateCurrentSeason={this.UpdateCurrentSeason.bind(this)} \n                    UpdateSortType={this.UpdateSortType.bind(this)}\n                    UpdateOrderType={this.UpdateOrderType.bind(this)} />\n                <EpisodeList \n                    episodes={episodes} \n                    currentSeason={this.state.currentSeason} \n                    sortType={this.state.sortType} \n                    order={this.state.order}/>\n            </main>\n        );\n    }\n}\n\nexport default PageLoad;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from 'react-dom';\nimport PageLoad from './components/PageLoad'\nimport * as serviceWorker from './components/serviceWorker';\n\nReactDOM.render(\n    <PageLoad />,\n    document.querySelector('#root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}